TestEnum::Item1: PhpNumber
- Variable: Item1 [PhpNumber]
  - Literal (numeric): "0" [PhpNumber]

TestEnum::Item2: PhpNumber
- Variable: Item2 [PhpNumber]
  - Literal (numeric): "1" [PhpNumber]

TestClass::testMethod(): any
  - Variable: $enum_v [PhpNumber]
    - InstanceField: Item1 [PhpNumber]
      - ClassReference [TestEnum]
  - If
    - Binary: == [OneBoolean]
      - Binary: * [PhpNumber]
        - Literal (numeric): "3" [PhpNumber]
        - Literal (numeric): "2" [PhpNumber]
      - Literal (numeric): "6" [PhpNumber]
    Then
      - ExpressionStatement
        - Binary: = [PhpNumber]
          - LocalVar: $enum_v [PhpNumber]
          - InstanceField: Item2 [PhpNumber]
            - ClassReference [TestEnum]
  - Variable: $check1 [PhpString]
    - Conditional [PhpString]
      - Binary: == [OneBoolean]
        - LocalVar: $enum_v [PhpNumber]
        - InstanceField: Item2 [PhpNumber]
          - ClassReference [TestEnum]
      - Literal (string): "SUCCESS" [PhpString]
      - Parenthesized [PhpString]
        - Literal (string): "FAIL" [PhpString]
  - Variable: $check2 [PhpString]
    - Conditional [PhpString]
      - Binary: == [OneBoolean]
        - LocalVar: $enum_v [PhpNumber]
        - InstanceField: Item1 [PhpNumber]
          - ClassReference [TestEnum]
      - Literal (string): "FAIL" [PhpString]
      - Parenthesized [PhpString]
        - Literal (string): "SUCCESS" [PhpString]
  - Comment: "\n"
  - ExpressionStatement
    - Call [void]
      - MethodReference (static) [OneConsole::print]
      - Parenthesized [PhpString]
        - Binary: . [PhpString]
          - Binary: . [PhpString]
            - Binary: . [PhpString]
              - Binary: . [PhpString]
                - Binary: . [PhpString]
                  - Binary: . [PhpString]
                    - Binary: . [PhpString]
                      - Binary: . [PhpString]
                        - Literal (string): "Item1: " [PhpString]
                        - Parenthesized [PhpNumber]
                          - InstanceField: Item1 [PhpNumber]
                            - ClassReference [TestEnum]
                      - Literal (string): ", Item2: " [PhpString]
                    - Parenthesized [PhpNumber]
                      - LocalVar: $enum_v [PhpNumber]
                  - Literal (string): ", checks: " [PhpString]
                - Parenthesized [PhpString]
                  - LocalVar: $check1 [PhpString]
              - Literal (string): " " [PhpString]
            - Parenthesized [PhpString]
              - LocalVar: $check2 [PhpString]
          - Literal (string): "" [PhpString]

