Calculator::factor(n: OneNumber): OneNumber
  - If
    - Binary: <= [OneBoolean]
      - MethodArgument: n [OneNumber]
      - Literal (numeric): "1" [OneNumber]
    Then
      - Return
        - Literal (numeric): "1" [OneNumber]
    Else
      - Return
        - Binary: * [OneNumber]
          - Call [OneNumber]
            - MethodReference (this) [Calculator::factor]
            - Binary: - [OneNumber]
              - MethodArgument: n [OneNumber]
              - Literal (numeric): "1" [OneNumber]
          - MethodArgument: n [OneNumber]

main()
  - ExpressionStatement
    - Call [void]
      - MethodReference (static) [OneConsole::print]
      - Literal (string): "Hello!" [OneString]
  - Comment: "\n"
  - Variable: arr [OneArray<OneNumber>]
    - ArrayLiteral [OneArray<OneNumber>]
      - Literal (numeric): "1" [OneNumber]
      - Literal (numeric): "2" [OneNumber]
      - Literal (numeric): "3" [OneNumber]
  - ExpressionStatement
    - Call [void]
      - MethodReference [OneArray<T>::add]
        - LocalVar: arr [OneArray<OneNumber>]
      - Literal (numeric): "4" [OneNumber]
  - Comment: "\n"
  - ExpressionStatement
    - Call [void]
      - MethodReference (static) [OneConsole::print]
      - TemplateString [OneString]
        - InstanceField: length [OneNumber]
          - LocalVar: arr [OneArray<OneNumber>]
        - Call [OneNumber]
          - MethodReference [OneArray<T>::get]
            - LocalVar: arr [OneArray<OneNumber>]
          - Literal (numeric): "0" [OneNumber]
  - Comment: "\n"
  - Variable: map [OneMap<OneString, OneNumber>]
    - MapLiteral [OneMap<OneString, OneNumber>]
      - Variable: a [OneNumber]
        - Literal (numeric): "2" [OneNumber]
      - Variable: b [OneNumber]
        - Literal (numeric): "3" [OneNumber]
  - ExpressionStatement
    - Call [void]
      - MethodReference (static) [OneConsole::print]
      - TemplateString [OneString]
        - Call [OneNumber]
          - MethodReference [OneMap<K, V>::get]
            - LocalVar: map [OneMap<OneString, OneNumber>]
          - Literal (string): "a" [OneString]
        - Call [OneNumber]
          - MethodReference [OneArray<T>::get]
            - LocalVar: arr [OneArray<OneNumber>]
          - Literal (numeric): "1" [OneNumber]
  - Comment: "\n"
  - If
    - Binary: == [OneBoolean]
      - Call [OneNumber]
        - MethodReference [OneArray<T>::get]
          - LocalVar: arr [OneArray<OneNumber>]
        - Literal (numeric): "0" [OneNumber]
      - Literal (numeric): "1" [OneNumber]
    Then
      - ExpressionStatement
        - Call [void]
          - MethodReference (static) [OneConsole::print]
          - Literal (string): "TRUE-X" [OneString]
    Else
      - ExpressionStatement
        - Call [void]
          - MethodReference (static) [OneConsole::print]
          - Literal (string): "FALSE" [OneString]
  - Comment: "\n"
  - Variable: sum [OneNumber]
    - Literal (numeric): "0" [OneNumber]
  - For ("i")
    Var
    - Variable: i [OneNumber]
      - Literal (numeric): "0" [OneNumber]
    Condition
      - Binary: < [OneNumber]
        - LocalVar: i [OneNumber]
        - Literal (numeric): "10" [OneNumber]
    Incrementor
      - Unary (postfix): ++ [OneNumber]
        - LocalVar: i [OneNumber]
    Body
      - ExpressionStatement
        - Binary: += [OneNumber]
          - LocalVar: sum [OneNumber]
          - Binary: + [OneNumber]
            - LocalVar: i [OneNumber]
            - Literal (numeric): "2" [OneNumber]
  - ExpressionStatement
    - Call [void]
      - MethodReference (static) [OneConsole::print]
      - LocalVar: sum [OneNumber]
  - Comment: "\n"
  - Variable: calc [Calculator]
    - New Calculator [Calculator]
  - ExpressionStatement
    - Call [void]
      - MethodReference (static) [OneConsole::print]
      - TemplateString [OneString]
        - Call [OneNumber]
          - MethodReference [Calculator::factor]
            - LocalVar: calc [Calculator]
          - Literal (numeric): "5" [OneNumber]
