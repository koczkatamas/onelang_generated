TestClass::test_method(): any
  - Variable: str [OneString]
    - Literal (string): "a1A" [OneString]
  - Variable: i [OneNumber]
    - Literal (numeric): "0" [OneNumber]
  - While
      - Binary: < [OneNumber]
        - LocalVar: i [OneNumber]
        - InstanceField: length [OneNumber]
          - LocalVar: str [OneString]
    Body
      - Variable: c [OneCharacter]
        - Call [OneCharacter]
          - MethodReference [OneString::get]
            - LocalVar: str [OneString]
          - LocalVar: i [OneNumber]
      - Variable: is_upper [OneBoolean]
        - Binary: && [OneBoolean]
          - Binary: <= [OneBoolean]
            - Literal (character): "A" [OneCharacter]
            - LocalVar: c [OneCharacter]
          - Binary: <= [OneBoolean]
            - LocalVar: c [OneCharacter]
            - Literal (character): "Z" [OneCharacter]
      - Variable: is_lower [OneBoolean]
        - Binary: && [OneBoolean]
          - Binary: <= [OneBoolean]
            - Literal (character): "a" [OneCharacter]
            - LocalVar: c [OneCharacter]
          - Binary: <= [OneBoolean]
            - LocalVar: c [OneCharacter]
            - Literal (character): "z" [OneCharacter]
      - Variable: is_number [OneBoolean]
        - Binary: && [OneBoolean]
          - Binary: <= [OneBoolean]
            - Literal (character): "0" [OneCharacter]
            - LocalVar: c [OneCharacter]
          - Binary: <= [OneBoolean]
            - LocalVar: c [OneCharacter]
            - Literal (character): "9" [OneCharacter]
      - ExpressionStatement
        - Call [void]
          - MethodReference (static) [OneConsole::print]
          - Conditional [OneString]
            - LocalVar: is_upper [OneBoolean]
            - Literal (string): "upper" [OneString]
            - Conditional [OneString]
              - LocalVar: is_lower [OneBoolean]
              - Literal (string): "lower" [OneString]
              - Conditional [OneString]
                - LocalVar: is_number [OneBoolean]
                - Literal (string): "number" [OneString]
                - Literal (string): "other" [OneString]
      - ExpressionStatement
        - Binary: += [OneNumber]
          - LocalVar: i [OneNumber]
          - Literal (numeric): "1" [OneNumber]

