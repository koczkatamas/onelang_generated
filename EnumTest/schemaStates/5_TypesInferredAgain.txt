enum TestEnum: Item1, Item2

TestClass::testMethod(): void
  - Variable: enumV [TestEnum (enum)]
    - EnumMemberReference [TestEnum (enum)]
  - If
    - Binary: == [OneBoolean]
      - Binary: * [OneNumber]
        - Literal (numeric): "3" [OneNumber]
        - Literal (numeric): "2" [OneNumber]
      - Literal (numeric): "6" [OneNumber]
    Then
      - ExpressionStatement
        - Binary: = [any]
          - LocalVar: enumV [TestEnum (enum)]
          - EnumMemberReference [TestEnum (enum)]
  - Comment: "\n"
  - Variable: check1 [OneString]
    - Conditional [OneString]
      - Binary: == [OneBoolean]
        - LocalVar: enumV [TestEnum (enum)]
        - EnumMemberReference [TestEnum (enum)]
      - Literal (string): "SUCCESS" [OneString]
      - Literal (string): "FAIL" [OneString]
  - Variable: check2 [OneString]
    - Conditional [OneString]
      - Binary: == [OneBoolean]
        - LocalVar: enumV [TestEnum (enum)]
        - EnumMemberReference [TestEnum (enum)]
      - Literal (string): "FAIL" [OneString]
      - Literal (string): "SUCCESS" [OneString]
  - Comment: "\n"
  - ExpressionStatement
    - Call [void]
      - MethodReference (static) [OneConsole::print]
      - TemplateString [any]
        - EnumMemberReference [TestEnum (enum)]
        - LocalVar: enumV [TestEnum (enum)]
        - LocalVar: check1 [OneString]
        - LocalVar: check2 [OneString]

