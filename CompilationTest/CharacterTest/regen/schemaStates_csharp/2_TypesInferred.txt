TestClass::TestMethod(): void
  - Variable: str [CsString]
    - Literal (string): "a1A" [CsString]
  - For ("i")
    Var
    - Variable: i [CsNumber]
      - Literal (numeric): "0" [CsNumber]
    Condition
      - Binary: < [CsNumber]
        - LocalVar: i [CsNumber]
        - InstanceField: Length [OneNumber]
          - LocalVar: str [CsString]
    Incrementor
      - Unary (postfix): ++ [any]
        - LocalVar: i [CsNumber]
    Body
      - Variable: c [OneCharacter]
        - Call [OneCharacter]
          - MethodReference [CsString::get]
            - LocalVar: str [CsString]
          - LocalVar: i [CsNumber]
      - Variable: isUpper [OneBoolean]
        - Binary: && [OneBoolean]
          - Binary: <= [OneBoolean]
            - Literal (string): "A" [CsString]
            - LocalVar: c [OneCharacter]
          - Binary: <= [OneBoolean]
            - LocalVar: c [OneCharacter]
            - Literal (string): "Z" [CsString]
      - Variable: isLower [OneBoolean]
        - Binary: && [OneBoolean]
          - Binary: <= [OneBoolean]
            - Literal (string): "a" [CsString]
            - LocalVar: c [OneCharacter]
          - Binary: <= [OneBoolean]
            - LocalVar: c [OneCharacter]
            - Literal (string): "z" [CsString]
      - Variable: isNumber [OneBoolean]
        - Binary: && [OneBoolean]
          - Binary: <= [OneBoolean]
            - Literal (string): "0" [CsString]
            - LocalVar: c [OneCharacter]
          - Binary: <= [OneBoolean]
            - LocalVar: c [OneCharacter]
            - Literal (string): "9" [CsString]
      - ExpressionStatement
        - Call [void]
          - MethodReference (static) [Console::WriteLine]
          - Conditional [CsString]
            - LocalVar: isUpper [OneBoolean]
            - Literal (string): "upper" [CsString]
            - Conditional [CsString]
              - LocalVar: isLower [OneBoolean]
              - Literal (string): "lower" [CsString]
              - Conditional [CsString]
                - LocalVar: isNumber [OneBoolean]
                - Literal (string): "number" [CsString]
                - Literal (string): "other" [CsString]

