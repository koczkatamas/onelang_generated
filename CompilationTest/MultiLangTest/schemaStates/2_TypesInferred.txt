Calculator::factor(n: TsNumber): TsNumber
  - If
    - Binary: <= [OneBoolean]
      - MethodArgument: n [TsNumber]
      - Literal (numeric): "1" [TsNumber]
    Then
      - Return
        - Literal (numeric): "1" [TsNumber]
    Else
      - Return
        - Binary: * [any]
          - Call [any]
            - MethodReference (this) [Calculator::factor]
            - Binary: - [TsNumber]
              - MethodArgument: n [TsNumber]
              - Literal (numeric): "1" [TsNumber]
          - MethodArgument: n [TsNumber]

main()
  - ExpressionStatement
    - Call [void]
      - MethodReference (static) [console::log]
      - Literal (string): "Hello!" [TsString]
  - Comment: "\n"
  - Variable: arr [TsArray<TsNumber>]
    - ArrayLiteral [TsArray<TsNumber>]
      - Literal (numeric): "1" [TsNumber]
      - Literal (numeric): "2" [TsNumber]
      - Literal (numeric): "3" [TsNumber]
  - ExpressionStatement
    - Call [void]
      - MethodReference [TsArray<TsNumber>::push]
        - LocalVar: arr [TsArray<TsNumber>]
      - Literal (numeric): "4" [TsNumber]
  - Comment: "\n"
  - ExpressionStatement
    - Call [void]
      - MethodReference (static) [console::log]
      - TemplateString [OneString]
        - InstanceField: length [TsNumber]
          - LocalVar: arr [TsArray<TsNumber>]
        - Call [TsNumber]
          - MethodReference [TsArray<TsNumber>::get]
            - LocalVar: arr [TsArray<TsNumber>]
          - Literal (numeric): "0" [TsNumber]
  - Comment: "\n"
  - Variable: map [TsMap<OneString, TsNumber>]
    - MapLiteral [TsMap<OneString, TsNumber>]
      - Variable: a [TsNumber]
        - Literal (numeric): "2" [TsNumber]
      - Variable: b [TsNumber]
        - Literal (numeric): "3" [TsNumber]
  - ExpressionStatement
    - Call [void]
      - MethodReference (static) [console::log]
      - TemplateString [OneString]
        - Call [void]
          - MethodReference [TsMap<OneString, TsNumber>::get]
            - LocalVar: map [TsMap<OneString, TsNumber>]
          - Literal (string): "a" [TsString]
        - Call [TsNumber]
          - MethodReference [TsArray<TsNumber>::get]
            - LocalVar: arr [TsArray<TsNumber>]
          - Literal (numeric): "1" [TsNumber]
  - Comment: "\n"
  - If
    - Binary: == [OneBoolean]
      - Call [TsNumber]
        - MethodReference [TsArray<TsNumber>::get]
          - LocalVar: arr [TsArray<TsNumber>]
        - Literal (numeric): "0" [TsNumber]
      - Literal (numeric): "1" [TsNumber]
    Then
      - ExpressionStatement
        - Call [void]
          - MethodReference (static) [console::log]
          - Literal (string): "TRUE-X" [TsString]
    Else
      - ExpressionStatement
        - Call [void]
          - MethodReference (static) [console::log]
          - Literal (string): "FALSE" [TsString]
  - Comment: "\n"
  - Variable: sum [TsNumber]
    - Literal (numeric): "0" [TsNumber]
  - For ("i")
    Var
    - Variable: i [TsNumber]
      - Literal (numeric): "0" [TsNumber]
    Condition
      - Binary: < [TsNumber]
        - LocalVar: i [TsNumber]
        - Literal (numeric): "10" [TsNumber]
    Incrementor
      - Unary (postfix): ++ [any]
        - LocalVar: i [TsNumber]
    Body
      - ExpressionStatement
        - Binary: += [TsNumber]
          - LocalVar: sum [TsNumber]
          - Binary: + [TsNumber]
            - LocalVar: i [TsNumber]
            - Literal (numeric): "2" [TsNumber]
  - ExpressionStatement
    - Call [void]
      - MethodReference (static) [console::log]
      - LocalVar: sum [TsNumber]
  - Comment: "\n"
  - Variable: calc [Calculator]
    - New Calculator [Calculator]
  - ExpressionStatement
    - Call [void]
      - MethodReference (static) [console::log]
      - TemplateString [OneString]
        - Call [TsNumber]
          - MethodReference [Calculator::factor]
            - LocalVar: calc [Calculator]
          - Literal (numeric): "5" [TsNumber]
