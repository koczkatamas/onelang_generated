enum TokenKind: Number, Identifier, Operator_, String_

Token::kind: TokenKind (enum)
Token::value: TsString

Token::constructor
  - ExpressionStatement
    - Binary: =
      - PropertyAccess (.kind)
        - Identifier: this
      - Identifier: kind
  - ExpressionStatement
    - Binary: =
      - PropertyAccess (.value)
        - Identifier: this
      - Identifier: value

ExprLangLexer::offset: null
- Variable: offset
  - Literal (numeric): "0"

ExprLangLexer::tokens: TsArray<Token>
- Variable: tokens [TsArray<Token>]
  - ArrayLiteral

ExprLangLexer::expression: TsString
ExprLangLexer::operators: TsArray<TsString>

ExprLangLexer::constructor
  - ExpressionStatement
    - Binary: =
      - PropertyAccess (.expression)
        - Identifier: this
      - Identifier: expression
  - ExpressionStatement
    - Binary: =
      - PropertyAccess (.operators)
        - Identifier: this
      - Identifier: operators
  - If
    - Unary (prefix): !
      - Call
        - PropertyAccess (.tryToReadNumber)
          - Identifier: this
    Then
      - ExpressionStatement
        - Call
          - PropertyAccess (.tryToReadOperator)
            - Identifier: this
      - ExpressionStatement
        - Call
          - PropertyAccess (.tryToReadLiteral)
            - Identifier: this
  - Comment: "\n"
  - While
      - Call
        - PropertyAccess (.hasMoreToken)
          - Identifier: this
    Body
      - If
        - Unary (prefix): !
          - Call
            - PropertyAccess (.tryToReadOperator)
              - Identifier: this
        Then
          - ExpressionStatement
            - Call
              - PropertyAccess (.fail)
                - Identifier: this
              - Literal (string): "expected operator here"
      - Comment: "\n"
      - If
        - Unary (prefix): !
          - Call
            - PropertyAccess (.tryToReadLiteral)
              - Identifier: this
        Then
          - ExpressionStatement
            - Call
              - PropertyAccess (.fail)
                - Identifier: this
              - Literal (string): "expected literal here"

ExprLangLexer::fail(message: TsString): void
  - Variable: endOffset
    - Binary: +
      - PropertyAccess (.offset)
        - Identifier: this
      - Literal (numeric): "30"
  - If
    - Binary: >
      - Identifier: endOffset
      - PropertyAccess (.length)
        - PropertyAccess (.expression)
          - Identifier: this
    Then
      - ExpressionStatement
        - Binary: =
          - Identifier: endOffset
          - PropertyAccess (.length)
            - PropertyAccess (.expression)
              - Identifier: this
  - Variable: context
    - Binary: +
      - Call
        - PropertyAccess (.substring)
          - PropertyAccess (.expression)
            - Identifier: this
        - PropertyAccess (.offset)
          - Identifier: this
        - Identifier: endOffset
      - Literal (string): "..."
  - ExpressionStatement
    - Call
      - PropertyAccess (.raise)
        - Identifier: OneError
      - TemplateString
        - Identifier: message
        - Identifier: context
        - PropertyAccess (.offset)
          - Identifier: this

ExprLangLexer::hasMoreToken(): TsBoolean
  - ExpressionStatement
    - Call
      - PropertyAccess (.skipWhitespace)
        - Identifier: this
  - Return
    - Unary (prefix): !
      - Call
        - PropertyAccess (.eof)
          - Identifier: this

ExprLangLexer::add(kind: TokenKind (enum), value: TsString): void
  - ExpressionStatement
    - Call
      - PropertyAccess (.push)
        - PropertyAccess (.tokens)
          - Identifier: this
      - New Token
  - ExpressionStatement
    - Binary: +=
      - PropertyAccess (.offset)
        - Identifier: this
      - PropertyAccess (.length)
        - Identifier: value

ExprLangLexer::tryToMatch(pattern: TsString): TsString
  - Variable: matches
    - Call
      - PropertyAccess (.matchFromIndex)
        - Identifier: OneRegex
      - Identifier: pattern
      - PropertyAccess (.expression)
        - Identifier: this
      - PropertyAccess (.offset)
        - Identifier: this
  - Return
    - Conditional
      - Binary: ==
        - Identifier: matches
        - Literal (null): "null"
      - Literal (string): ""
      - ElementAccess
        - Identifier: matches
        - Literal (numeric): "0"

ExprLangLexer::tryToReadOperator(): TsBoolean
  - ExpressionStatement
    - Call
      - PropertyAccess (.skipWhitespace)
        - Identifier: this
  - Foreach op: undefined
    Items
      - PropertyAccess (.operators)
        - Identifier: this
    Body
      - If
        - Call
          - PropertyAccess (.startsWith)
            - PropertyAccess (.expression)
              - Identifier: this
          - Identifier: op
          - PropertyAccess (.offset)
            - Identifier: this
        Then
          - ExpressionStatement
            - Call
              - PropertyAccess (.add)
                - Identifier: this
              - PropertyAccess (.Operator_)
                - Identifier: TokenKind
              - Identifier: op
          - Return
            - Literal (boolean): true
  - Return
    - Literal (boolean): false

ExprLangLexer::tryToReadNumber(): TsBoolean
  - ExpressionStatement
    - Call
      - PropertyAccess (.skipWhitespace)
        - Identifier: this
  - Comment: "\n"
  - Variable: number
    - Call
      - PropertyAccess (.tryToMatch)
        - Identifier: this
      - Literal (string): "[+-]?(\\d*\\.\\d+|\\d+\\.\\d+|0x[0-9a-fA-F_]+|0b[01_]+|[0-9_]+)"
  - If
    - Binary: ==
      - Identifier: number
      - Literal (string): ""
    Then
      - Return
        - Literal (boolean): false
  - Comment: "\n"
  - ExpressionStatement
    - Call
      - PropertyAccess (.add)
        - Identifier: this
      - PropertyAccess (.Number)
        - Identifier: TokenKind
      - Identifier: number
  - Comment: "\n"
  - If
    - Binary: !=
      - Call
        - PropertyAccess (.tryToMatch)
          - Identifier: this
        - Literal (string): "[0-9a-zA-Z]"
      - Literal (string): ""
    Then
      - ExpressionStatement
        - Call
          - PropertyAccess (.fail)
            - Identifier: this
          - Literal (string): "invalid character in number"
  - Comment: "\n"
  - Return
    - Literal (boolean): true

ExprLangLexer::tryToReadIdentifier(): TsBoolean
  - ExpressionStatement
    - Call
      - PropertyAccess (.skipWhitespace)
        - Identifier: this
  - Variable: identifier
    - Call
      - PropertyAccess (.tryToMatch)
        - Identifier: this
      - Literal (string): "[a-zA-Z_][a-zA-Z0-9_]*"
  - If
    - Binary: ==
      - Identifier: identifier
      - Literal (string): ""
    Then
      - Return
        - Literal (boolean): false
  - Comment: "\n"
  - ExpressionStatement
    - Call
      - PropertyAccess (.add)
        - Identifier: this
      - PropertyAccess (.Identifier)
        - Identifier: TokenKind
      - Identifier: identifier
  - Return
    - Literal (boolean): true

ExprLangLexer::tryToReadString(): TsBoolean
  - ExpressionStatement
    - Call
      - PropertyAccess (.skipWhitespace)
        - Identifier: this
  - Comment: "\n"
  - Variable: match
    - Call
      - PropertyAccess (.tryToMatch)
        - Identifier: this
      - Literal (string): "'(\\\\'|[^'])*'"
  - If
    - Binary: ==
      - Identifier: match
      - Literal (string): ""
    Then
      - ExpressionStatement
        - Binary: =
          - Identifier: match
          - Call
            - PropertyAccess (.tryToMatch)
              - Identifier: this
            - Literal (string): "\"(\\\\\"|[^\"])*\""
  - If
    - Binary: ==
      - Identifier: match
      - Literal (string): ""
    Then
      - Return
        - Literal (boolean): false
  - Comment: "\n"
  - Variable: str
    - Call
      - PropertyAccess (.substr)
        - Identifier: match
      - Literal (numeric): "1"
      - Binary: -
        - PropertyAccess (.length)
          - Identifier: match
        - Literal (numeric): "2"
  - ExpressionStatement
    - Binary: =
      - Identifier: str
      - Conditional
        - Binary: ==
          - ElementAccess
            - Identifier: match
            - Literal (numeric): "0"
          - Literal (string): "'"
        - Call
          - PropertyAccess (.replace)
            - Identifier: str
          - Literal (string): "\\'"
          - Literal (string): "'"
        - Call
          - PropertyAccess (.replace)
            - Identifier: str
          - Literal (string): "\\\""
          - Literal (string): "\""
  - ExpressionStatement
    - Call
      - PropertyAccess (.push)
        - PropertyAccess (.tokens)
          - Identifier: this
      - New Token
  - ExpressionStatement
    - Binary: +=
      - PropertyAccess (.offset)
        - Identifier: this
      - PropertyAccess (.length)
        - Identifier: match
  - Return
    - Literal (boolean): true

ExprLangLexer::eof(): TsBoolean
  - Return
    - Binary: >=
      - PropertyAccess (.offset)
        - Identifier: this
      - PropertyAccess (.length)
        - PropertyAccess (.expression)
          - Identifier: this

ExprLangLexer::skipWhitespace(): void
  - While
      - Unary (prefix): !
        - Call
          - PropertyAccess (.eof)
            - Identifier: this
    Body
      - Variable: c
        - ElementAccess
          - PropertyAccess (.expression)
            - Identifier: this
          - PropertyAccess (.offset)
            - Identifier: this
      - If
        - Binary: ||
          - Binary: ||
            - Binary: ||
              - Binary: ==
                - Identifier: c
                - Literal (string): " "
              - Binary: ==
                - Identifier: c
                - Literal (string): "\n"
            - Binary: ==
              - Identifier: c
              - Literal (string): "\t"
          - Binary: ==
            - Identifier: c
            - Literal (string): "\r"
        Then
          - ExpressionStatement
            - Unary (postfix): ++
              - PropertyAccess (.offset)
                - Identifier: this
        Else
          - Break

ExprLangLexer::tryToReadLiteral(): TsBoolean
  - Variable: success
    - Binary: ||
      - Binary: ||
        - Call
          - PropertyAccess (.tryToReadIdentifier)
            - Identifier: this
        - Call
          - PropertyAccess (.tryToReadNumber)
            - Identifier: this
      - Call
        - PropertyAccess (.tryToReadString)
          - Identifier: this
  - Return
    - Identifier: success

TestClass::testMethod(): void
  - Variable: lexer
    - New ExprLangLexer
  - Variable: result
    - Literal (string): ""
  - Foreach token: undefined
    Items
      - PropertyAccess (.tokens)
        - Identifier: lexer
    Body
      - If
        - Binary: !=
          - Identifier: result
          - Literal (string): ""
        Then
          - ExpressionStatement
            - Binary: +=
              - Identifier: result
              - Literal (string): ", "
      - ExpressionStatement
        - Binary: +=
          - Identifier: result
          - PropertyAccess (.value)
            - Identifier: token
  - Comment: "\n"
  - ExpressionStatement
    - Call
      - PropertyAccess (.log)
        - Identifier: console
      - TemplateString
        - PropertyAccess (.length)
          - PropertyAccess (.tokens)
            - Identifier: lexer
        - Identifier: result

