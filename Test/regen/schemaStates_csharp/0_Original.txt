TestClass::MapTest(): int
  - Variable: mapObj
    - MapLiteral
      - Variable: x
        - Literal (numeric): "5"
      - Variable: y
        - Literal (numeric): "3"
  - Comment: "\n//let containsX = "x" in mapObj;\n"
  - ExpressionStatement
    - Binary: =
      - ElementAccess
        - Identifier: mapObj
        - Literal (string): "z"
      - Literal (numeric): "9"
  - ExpressionStatement
    - Call
      - PropertyAccess (.Remove)
        - Identifier: mapObj
      - Literal (string): "x"
  - Comment: "\n"
  - ExpressionStatement
    - Call
      - PropertyAccess (.ToArray)
        - PropertyAccess (.Keys)
          - Identifier: mapObj
  - ExpressionStatement
    - Call
      - PropertyAccess (.ToArray)
        - PropertyAccess (.Values)
          - Identifier: mapObj
  - Return
    - ElementAccess
      - Identifier: mapObj
      - Literal (string): "z"

TestClass::ExplicitTypeTest(): void
  - Variable: op
    - Literal (string): ""
  - ExpressionStatement
    - Call
      - PropertyAccess (.WriteLine)
        - Identifier: Console
      - PropertyAccess (.Length)
        - Identifier: op

TestClass::IfTest(x: int): CsString
  - Variable: result
    - Literal (string): "<unk>"
  - Comment: "\n"
  - If
    - Binary: >
      - Identifier: x
      - Literal (numeric): "3"
    Then
      - ExpressionStatement
        - Binary: =
          - Identifier: result
          - Literal (string): "hello"
    Else
      - If
        - Binary: <
          - Identifier: x
          - Literal (numeric): "1"
        Then
          - ExpressionStatement
            - Binary: =
              - Identifier: result
              - Literal (string): "bello"
        Else
          - If
            - Binary: <
              - Identifier: x
              - Literal (numeric): "0"
            Then
              - ExpressionStatement
                - Binary: =
                  - Identifier: result
                  - Literal (string): "bello2"
            Else
              - ExpressionStatement
                - Binary: =
                  - Identifier: result
                  - Literal (string): "???"
  - Comment: "\n"
  - If
    - Binary: >
      - Identifier: x
      - Literal (numeric): "3"
    Then
      - ExpressionStatement
        - Binary: =
          - Identifier: result
          - Literal (string): "z"
  - Comment: "\n"
  - If
    - Binary: >
      - Identifier: x
      - Literal (numeric): "3"
    Then
      - ExpressionStatement
        - Binary: =
          - Identifier: result
          - Literal (string): "x"
    Else
      - ExpressionStatement
        - Binary: =
          - Identifier: result
          - Literal (string): "y"
  - Comment: "\n"
  - Return
    - Identifier: result

TestClass::ArrayTest(): void
  - Comment: "//const c2 = new Class2();\n\n"
  - Variable: mutableArr
    - ArrayLiteral
      - Literal (numeric): "1"
      - Literal (numeric): "2"
  - ExpressionStatement
    - Call
      - PropertyAccess (.Add)
        - Identifier: mutableArr
      - Literal (numeric): "3"
  - ExpressionStatement
    - Call
      - PropertyAccess (.Add)
        - Identifier: mutableArr
      - Literal (numeric): "4"
  - Comment: "// mutableArr.push(c2.property);\n// mutableArr.push(c2.child.property);\n// mutableArr.push(c2.child.child.property);\n\n"
  - Variable: constantArr
    - ArrayLiteral
      - Literal (numeric): "5"
      - Literal (numeric): "6"
  - Comment: "\n// some comment\n//   some comment line 2\n"
  - Foreach item: undefined
    Items
      - Identifier: mutableArr
    Body
      - ExpressionStatement
        - Call
          - PropertyAccess (.WriteLine)
            - Identifier: Console
          - Identifier: item
  - Comment: "\n/* some other comment\n   multiline and stuff\n*/\n"
  - For ("i")
    Var
    - Variable: i
      - Literal (numeric): "0"
    Condition
      - Binary: <
        - Identifier: i
        - PropertyAccess (.Count)
          - Identifier: constantArr
    Incrementor
      - Unary (postfix): ++
        - Identifier: i
    Body
      - ExpressionStatement
        - Call
          - PropertyAccess (.WriteLine)
            - Identifier: Console
          - ElementAccess
            - Identifier: constantArr
            - Identifier: i

TestClass::Calc(): int
  - Return
    - Binary: *
      - Parenthesized
        - Binary: +
          - Literal (numeric): "1"
          - Literal (numeric): "2"
      - Literal (numeric): "3"

TestClass::MethodWithArgs(arg1: int, arg2: int, arg3: int): int
  - Variable: stuff
    - Binary: +
      - Binary: +
        - Identifier: arg1
        - Identifier: arg2
      - Binary: *
        - Identifier: arg3
        - Call
          - PropertyAccess (.Calc)
            - Identifier: this
  - Return
    - Identifier: stuff

TestClass::StringTest(): CsString
  - Variable: x
    - Literal (string): "x"
  - Variable: y
    - Literal (string): "y"
  - Comment: "\n"
  - Variable: z
    - Literal (string): "z"
  - ExpressionStatement
    - Binary: +=
      - Identifier: z
      - Literal (string): "Z"
  - ExpressionStatement
    - Binary: +=
      - Identifier: z
      - Identifier: x
  - Comment: "\n"
  - Return
    - Binary: +
      - Binary: +
        - Binary: +
          - Identifier: z
          - Literal (string): "|"
        - Identifier: x
      - Identifier: y

TestClass::ReverseString(str: CsString): CsString
  - Variable: result
    - Literal (string): ""
  - For ("i")
    Var
    - Variable: i
      - Binary: -
        - PropertyAccess (.Length)
          - Identifier: str
        - Literal (numeric): "1"
    Condition
      - Binary: >=
        - Identifier: i
        - Literal (numeric): "0"
    Incrementor
      - Unary (postfix): --
        - Identifier: i
    Body
      - ExpressionStatement
        - Binary: +=
          - Identifier: result
          - ElementAccess
            - Identifier: str
            - Identifier: i
  - Return
    - Identifier: result

TestClass::GetBoolResult(value: bool): bool
  - Return
    - Identifier: value

TestClass::TestMethod(): void
  - ExpressionStatement
    - Call
      - PropertyAccess (.ArrayTest)
        - Identifier: this
  - ExpressionStatement
    - Call
      - PropertyAccess (.WriteLine)
        - Identifier: Console
      - Call
        - PropertyAccess (.MapTest)
          - Identifier: this
  - ExpressionStatement
    - Call
      - PropertyAccess (.WriteLine)
        - Identifier: Console
      - Call
        - PropertyAccess (.StringTest)
          - Identifier: this
  - ExpressionStatement
    - Call
      - PropertyAccess (.WriteLine)
        - Identifier: Console
      - Call
        - PropertyAccess (.ReverseString)
          - Identifier: this
        - Literal (string): "print value"
  - ExpressionStatement
    - Call
      - PropertyAccess (.WriteLine)
        - Identifier: Console
      - Conditional
        - Call
          - PropertyAccess (.GetBoolResult)
            - Identifier: this
          - Literal (boolean): true
        - Literal (string): "true"
        - Literal (string): "false"

