TokenType::EndToken: TsString
- Variable: EndToken [TsString]
  - Literal (string): "EndToken" [TsString]

TokenType::Whitespace: TsString
- Variable: Whitespace [TsString]
  - Literal (string): "Whitespace" [TsString]

TokenType::Identifier: TsString
- Variable: Identifier [TsString]
  - Literal (string): "Identifier" [TsString]

TokenType::OperatorX: TsString
- Variable: OperatorX [TsString]
  - Literal (string): "Operator" [TsString]

Token::value: TsString
Token::isOperator: TsBoolean

Token::constructor
  - ExpressionStatement
    - Binary: = [any]
      - InstanceField (this): value [TsString]
      - MethodArgument: value [TsString]
  - ExpressionStatement
    - Binary: = [any]
      - InstanceField (this): isOperator [TsBoolean]
      - MethodArgument: isOperator [TsBoolean]

StringHelper::startsWithAtIndex(str: TsString, substr: TsString, idx: TsNumber): TsBoolean [static]
  - Return
    - Binary: == [OneBoolean]
      - Call [OneString]
        - MethodReference [TsString::substr]
          - MethodArgument: str [TsString]
        - MethodArgument: idx [TsNumber]
        - InstanceField: length [OneNumber]
          - MethodArgument: substr [TsString]
      - MethodArgument: substr [TsString]

Tokenizer::offset: TsNumber
Tokenizer::text: TsString
Tokenizer::operators: TsArray<TsString>

Tokenizer::constructor
  - ExpressionStatement
    - Binary: = [any]
      - InstanceField (this): text [TsString]
      - MethodArgument: text [TsString]
  - ExpressionStatement
    - Binary: = [any]
      - InstanceField (this): operators [TsArray<TsString>]
      - MethodArgument: operators [TsArray<TsString>]
  - ExpressionStatement
    - Binary: = [any]
      - InstanceField (this): offset [TsNumber]
      - Literal (numeric): "0" [TsNumber]

Tokenizer::getTokenType(): TsString
  - If
    - Binary: >= [OneBoolean]
      - InstanceField (this): offset [TsNumber]
      - InstanceField: length [OneNumber]
        - InstanceField (this): text [TsString]
    Then
      - Return
        - StaticField: EndToken [TsString]
          - ClassReference [TokenType]
  - Comment: "\n"
  - Variable: c [OneCharacter]
    - Call [OneCharacter]
      - MethodReference [TsString::get]
        - InstanceField (this): text [TsString]
      - InstanceField (this): offset [TsNumber]
  - Return
    - Conditional [TsString]
      - Binary: || [OneBoolean]
        - Binary: || [OneBoolean]
          - Binary: || [OneBoolean]
            - Binary: == [OneBoolean]
              - LocalVar: c [OneCharacter]
              - Literal (string): " " [TsString]
            - Binary: == [OneBoolean]
              - LocalVar: c [OneCharacter]
              - Literal (string): "\n" [TsString]
          - Binary: == [OneBoolean]
            - LocalVar: c [OneCharacter]
            - Literal (string): "\t" [TsString]
        - Binary: == [OneBoolean]
          - LocalVar: c [OneCharacter]
          - Literal (string): "\r" [TsString]
      - StaticField: Whitespace [TsString]
        - ClassReference [TokenType]
      - Conditional [TsString]
        - Binary: || [OneBoolean]
          - Binary: || [OneBoolean]
            - Binary: || [OneBoolean]
              - Parenthesized [OneBoolean]
                - Binary: && [OneBoolean]
                  - Binary: <= [OneBoolean]
                    - Literal (string): "A" [TsString]
                    - LocalVar: c [OneCharacter]
                  - Binary: <= [OneBoolean]
                    - LocalVar: c [OneCharacter]
                    - Literal (string): "Z" [TsString]
              - Parenthesized [OneBoolean]
                - Binary: && [OneBoolean]
                  - Binary: <= [OneBoolean]
                    - Literal (string): "a" [TsString]
                    - LocalVar: c [OneCharacter]
                  - Binary: <= [OneBoolean]
                    - LocalVar: c [OneCharacter]
                    - Literal (string): "z" [TsString]
            - Parenthesized [OneBoolean]
              - Binary: && [OneBoolean]
                - Binary: <= [OneBoolean]
                  - Literal (string): "0" [TsString]
                  - LocalVar: c [OneCharacter]
                - Binary: <= [OneBoolean]
                  - LocalVar: c [OneCharacter]
                  - Literal (string): "9" [TsString]
          - Binary: == [OneBoolean]
            - LocalVar: c [OneCharacter]
            - Literal (string): "_" [TsString]
        - StaticField: Identifier [TsString]
          - ClassReference [TokenType]
        - StaticField: OperatorX [TsString]
          - ClassReference [TokenType]

Tokenizer::tokenize(): TsArray<Token>
  - Variable: result [TsArray<Token>]
    - ArrayLiteral [TsArray<Token>]
  - Comment: "\n"
  - While
      - Binary: < [any]
        - InstanceField (this): offset [TsNumber]
        - InstanceField: length [OneNumber]
          - InstanceField (this): text [TsString]
    Body
      - Variable: charType [TsString]
        - Call [TsString]
          - MethodReference (this) [Tokenizer::getTokenType]
      - Comment: "\n"
      - If
        - Binary: == [OneBoolean]
          - LocalVar: charType [TsString]
          - StaticField: Whitespace [TsString]
            - ClassReference [TokenType]
        Then
          - While
              - Binary: == [OneBoolean]
                - Call [TsString]
                  - MethodReference (this) [Tokenizer::getTokenType]
                - StaticField: Whitespace [TsString]
                  - ClassReference [TokenType]
            Body
              - ExpressionStatement
                - Unary (postfix): ++ [any]
                  - InstanceField (this): offset [TsNumber]
        Else
          - If
            - Binary: == [OneBoolean]
              - LocalVar: charType [TsString]
              - StaticField: Identifier [TsString]
                - ClassReference [TokenType]
            Then
              - Variable: startOffset [TsNumber]
                - InstanceField (this): offset [TsNumber]
              - While
                  - Binary: == [OneBoolean]
                    - Call [TsString]
                      - MethodReference (this) [Tokenizer::getTokenType]
                    - StaticField: Identifier [TsString]
                      - ClassReference [TokenType]
                Body
                  - ExpressionStatement
                    - Unary (postfix): ++ [any]
                      - InstanceField (this): offset [TsNumber]
              - Variable: identifier [OneString]
                - Call [OneString]
                  - MethodReference [TsString::substring]
                    - InstanceField (this): text [TsString]
                  - LocalVar: startOffset [TsNumber]
                  - InstanceField (this): offset [TsNumber]
              - ExpressionStatement
                - Call [void]
                  - MethodReference [TsArray<Token>::push]
                    - LocalVar: result [TsArray<Token>]
                  - New Token [Token]
            Else
              - Variable: op [TsString]
                - Literal (string): "" [TsString]
              - Foreach currOp: TsString
                Items
                  - InstanceField (this): operators [TsArray<TsString>]
                Body
                  - If
                    - Call [TsBoolean]
                      - MethodReference (static) [StringHelper::startsWithAtIndex]
                      - InstanceField (this): text [TsString]
                      - LocalVar: currOp [TsString]
                      - InstanceField (this): offset [TsNumber]
                    Then
                      - ExpressionStatement
                        - Binary: = [any]
                          - LocalVar: op [TsString]
                          - LocalVar: currOp [TsString]
                      - Break
              - Comment: "\n"
              - If
                - Binary: == [OneBoolean]
                  - LocalVar: op [TsString]
                  - Literal (string): "" [TsString]
                Then
                  - Break
              - Comment: "\n"
              - ExpressionStatement
                - Binary: += [any]
                  - InstanceField (this): offset [TsNumber]
                  - InstanceField: length [OneNumber]
                    - LocalVar: op [TsString]
              - ExpressionStatement
                - Call [void]
                  - MethodReference [TsArray<Token>::push]
                    - LocalVar: result [TsArray<Token>]
                  - New Token [Token]
  - Comment: "\n"
  - Return
    - LocalVar: result [TsArray<Token>]

TestClass::testMethod(): void
  - Variable: operators [TsArray<TsString>]
    - ArrayLiteral [TsArray<TsString>]
      - Literal (string): "<<" [TsString]
      - Literal (string): ">>" [TsString]
      - Literal (string): "++" [TsString]
      - Literal (string): "--" [TsString]
      - Literal (string): "==" [TsString]
      - Literal (string): "!=" [TsString]
      - Literal (string): "!" [TsString]
      - Literal (string): "<" [TsString]
      - Literal (string): ">" [TsString]
      - Literal (string): "=" [TsString]
      - Literal (string): "(" [TsString]
      - Literal (string): ")" [TsString]
      - Literal (string): "[" [TsString]
      - Literal (string): "]" [TsString]
      - Literal (string): "{" [TsString]
      - Literal (string): "}" [TsString]
      - Literal (string): ";" [TsString]
      - Literal (string): "+" [TsString]
      - Literal (string): "-" [TsString]
      - Literal (string): "*" [TsString]
      - Literal (string): "/" [TsString]
      - Literal (string): "&&" [TsString]
      - Literal (string): "&" [TsString]
      - Literal (string): "%" [TsString]
      - Literal (string): "||" [TsString]
      - Literal (string): "|" [TsString]
      - Literal (string): "^" [TsString]
      - Literal (string): "," [TsString]
      - Literal (string): "." [TsString]
  - Comment: "\n"
  - Variable: input [TsString]
    - Literal (string): "hello * 5" [TsString]
  - Variable: tokenizer [Tokenizer]
    - New Tokenizer [Tokenizer]
  - Variable: result [TsArray<Token>]
    - Call [TsArray<Token>]
      - MethodReference [Tokenizer::tokenize]
        - LocalVar: tokenizer [Tokenizer]
  - Comment: "\n"
  - ExpressionStatement
    - Call [void]
      - MethodReference (static) [console::log]
      - Literal (string): "token count:" [TsString]
  - ExpressionStatement
    - Call [void]
      - MethodReference (static) [console::log]
      - InstanceField: length [TsNumber]
        - LocalVar: result [TsArray<Token>]
  - Foreach item: Token
    Items
      - LocalVar: result [TsArray<Token>]
    Body
      - ExpressionStatement
        - Call [void]
          - MethodReference (static) [console::log]
          - Binary: + [any]
            - Binary: + [any]
              - Binary: + [any]
                - InstanceField: value [TsString]
                  - LocalVar: item [Token]
                - Literal (string): "(" [TsString]
              - Parenthesized [TsString]
                - Conditional [TsString]
                  - InstanceField: isOperator [TsBoolean]
                    - LocalVar: item [Token]
                  - Literal (string): "op" [TsString]
                  - Literal (string): "id" [TsString]
            - Literal (string): ")" [TsString]

