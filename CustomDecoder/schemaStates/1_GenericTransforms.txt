XorByte::xorValue: TsNumber

XorByte::constructor
  - ExpressionStatement
    - Binary: =
      - PropertyAccess (.xorValue)
        - Identifier: this
      - Identifier: xorValue

XorByte::decode(src: TsArray<TsNumber>): TsArray<TsNumber>
  - Variable: dest [TsArray<TsNumber>]
    - ArrayLiteral
  - Comment: "\n"
  - For ("i")
    Var
    - Variable: i
      - Literal (numeric): "0"
    Condition
      - Binary: <
        - Identifier: i
        - PropertyAccess (.length)
          - Identifier: src
    Incrementor
      - Unary (postfix): ++
        - Identifier: i
    Body
      - ExpressionStatement
        - Call
          - PropertyAccess (.push)
            - Identifier: dest
          - Binary: ^
            - Call
              - PropertyAccess (.get)
                - Identifier: src
              - Identifier: i
            - PropertyAccess (.xorValue)
              - Identifier: this
  - Comment: "\n"
  - Return
    - Identifier: dest

Base64::decode(src: TsArray<TsNumber>): TsArray<TsNumber>
  - Variable: dest [TsArray<TsNumber>]
    - ArrayLiteral
  - Comment: "\n// 4 base64 chars => 3 bytes\n"
  - For ("i")
    Var
    - Variable: i
      - Literal (numeric): "0"
    Condition
      - Binary: <
        - Identifier: i
        - PropertyAccess (.length)
          - Identifier: src
    Incrementor
      - Binary: +=
        - Identifier: i
        - Literal (numeric): "4"
    Body
      - Variable: ch0
        - Call
          - PropertyAccess (.decodeChar)
            - Identifier: this
          - Call
            - PropertyAccess (.get)
              - Identifier: src
            - Identifier: i
      - Variable: ch1
        - Call
          - PropertyAccess (.decodeChar)
            - Identifier: this
          - Call
            - PropertyAccess (.get)
              - Identifier: src
            - Binary: +
              - Identifier: i
              - Literal (numeric): "1"
      - Variable: ch2
        - Call
          - PropertyAccess (.decodeChar)
            - Identifier: this
          - Call
            - PropertyAccess (.get)
              - Identifier: src
            - Binary: +
              - Identifier: i
              - Literal (numeric): "2"
      - Variable: ch3
        - Call
          - PropertyAccess (.decodeChar)
            - Identifier: this
          - Call
            - PropertyAccess (.get)
              - Identifier: src
            - Binary: +
              - Identifier: i
              - Literal (numeric): "3"
      - Comment: "\n"
      - Variable: trinity
        - Binary: +
          - Binary: +
            - Binary: +
              - Parenthesized
                - Binary: <<
                  - Identifier: ch0
                  - Literal (numeric): "18"
              - Parenthesized
                - Binary: <<
                  - Identifier: ch1
                  - Literal (numeric): "12"
            - Parenthesized
              - Binary: <<
                - Identifier: ch2
                - Literal (numeric): "6"
          - Parenthesized
            - Identifier: ch3
      - Comment: "\n"
      - ExpressionStatement
        - Call
          - PropertyAccess (.push)
            - Identifier: dest
          - Binary: >>
            - Identifier: trinity
            - Literal (numeric): "16"
      - ExpressionStatement
        - Call
          - PropertyAccess (.push)
            - Identifier: dest
          - Binary: &
            - Parenthesized
              - Binary: >>
                - Identifier: trinity
                - Literal (numeric): "8"
            - Literal (numeric): "0xff"
      - ExpressionStatement
        - Call
          - PropertyAccess (.push)
            - Identifier: dest
          - Binary: &
            - Identifier: trinity
            - Literal (numeric): "0xff"
  - Comment: "\n"
  - Return
    - Identifier: dest

Base64::decodeChar(ch: TsNumber): TsNumber
  - Variable: value [TsNumber]
    - Unary (prefix): -
      - Literal (numeric): "1"
  - If
    - Binary: &&
      - Binary: >=
        - Identifier: ch
        - Literal (numeric): "65"
      - Binary: <=
        - Identifier: ch
        - Literal (numeric): "90"
    Then
      - Comment: "// `A-Z` => 0..25\n"
      - ExpressionStatement
        - Binary: =
          - Identifier: value
          - Binary: -
            - Identifier: ch
            - Literal (numeric): "65"
    Else
      - If
        - Binary: &&
          - Binary: >=
            - Identifier: ch
            - Literal (numeric): "97"
          - Binary: <=
            - Identifier: ch
            - Literal (numeric): "122"
        Then
          - Comment: "// `a-z` => 26..51\n"
          - ExpressionStatement
            - Binary: =
              - Identifier: value
              - Binary: +
                - Binary: -
                  - Identifier: ch
                  - Literal (numeric): "97"
                - Literal (numeric): "26"
        Else
          - If
            - Binary: &&
              - Binary: >=
                - Identifier: ch
                - Literal (numeric): "48"
              - Binary: <=
                - Identifier: ch
                - Literal (numeric): "57"
            Then
              - Comment: "// `0-9` => 52..61\n"
              - ExpressionStatement
                - Binary: =
                  - Identifier: value
                  - Binary: +
                    - Binary: -
                      - Identifier: ch
                      - Literal (numeric): "48"
                    - Literal (numeric): "52"
            Else
              - If
                - Binary: ||
                  - Binary: ==
                    - Identifier: ch
                    - Literal (numeric): "43"
                  - Binary: ==
                    - Identifier: ch
                    - Literal (numeric): "45"
                Then
                  - Comment: "// `+` or `-` => 62\n"
                  - ExpressionStatement
                    - Binary: =
                      - Identifier: value
                      - Literal (numeric): "62"
                Else
                  - If
                    - Binary: ||
                      - Binary: ==
                        - Identifier: ch
                        - Literal (numeric): "47"
                      - Binary: ==
                        - Identifier: ch
                        - Literal (numeric): "95"
                    Then
                      - Comment: "// `/` or `_` => 63\n"
                      - ExpressionStatement
                        - Binary: =
                          - Identifier: value
                          - Literal (numeric): "63"
                    Else
                      - If
                        - Binary: ==
                          - Identifier: ch
                          - Literal (numeric): "61"
                        Then
                          - Comment: "// `=` => padding\n"
                          - ExpressionStatement
                            - Binary: =
                              - Identifier: value
                              - Literal (numeric): "0"
                        Else
  - Return
    - Identifier: value

TestClass::testMethod(): void
  - Variable: src1
    - ArrayLiteral
      - Literal (numeric): "4"
      - Literal (numeric): "5"
      - Literal (numeric): "6"
  - Variable: decoder [ICustomDecoder]
    - New XorByte
  - Variable: dst1
    - Call
      - PropertyAccess (.decode)
        - Identifier: decoder
      - Identifier: src1
  - Foreach x: undefined
    Items
      - Identifier: dst1
    Body
      - ExpressionStatement
        - Call
          - PropertyAccess (.log)
            - Identifier: console
          - Identifier: x
  - Comment: "\n"
  - ExpressionStatement
    - Call
      - PropertyAccess (.log)
        - Identifier: console
      - Literal (string): "|"
  - Comment: "\n"
  - Variable: src2
    - ArrayLiteral
      - Literal (numeric): "97"
      - Literal (numeric): "71"
      - Literal (numeric): "86"
      - Literal (numeric): "115"
      - Literal (numeric): "98"
      - Literal (numeric): "71"
      - Literal (numeric): "56"
      - Literal (numeric): "61"
  - Variable: decoder2
    - New Base64
  - Variable: dst2
    - Call
      - PropertyAccess (.decode)
        - Identifier: decoder2
      - Identifier: src2
  - Foreach x: undefined
    Items
      - Identifier: dst2
    Body
      - ExpressionStatement
        - Call
          - PropertyAccess (.log)
            - Identifier: console
          - Identifier: x

